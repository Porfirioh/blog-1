<?php//// Менеджер статей//class M_Articles extends M_Table{    private static $instance; 	// ссылка на экземпляр класса    public static function instance($table_name = 'articles', $table_key = 'id')    {        if (self::$instance == null){            self::$instance = new self($table_name, $table_key);        }        return self::$instance;    }    private function __construct($table_name, $table_key)    {        parent::init($table_name, $table_key);    }    private function getArticlePreviewText($text)    {        $preview_text_length_koef = 0.4;        $length = mb_strlen($text, 'utf8');        $new_length = floor($length * $preview_text_length_koef);        return mb_substr($text, 0, $new_length, 'utf8').'...';    }    // Добавить статью	//	public function addRecord($title, $content, $user_id)	{		// Подготовка.		$title = trim($title);		$content = trim($content);		// Проверка.		if ($title == '' || $content == ''){			return false;        }				// Запрос.		$obj = array();		$obj['title'] = $title;		$obj['content'] = $content;        $obj['creation_date']  = date("Y-m-d H:i:s");        $obj['user_id']  = $user_id;				$this->msql->insert($this->table_name, $obj);		return true;	}	//	// Изменить статью	//	public function editRecord($id, $title, $content)	{		// Подготовка.		$title = trim($title);		$content = trim($content);		// Проверка.		if ($title == ''){			return false;        }		// Запрос.		$obj = array();		$obj['title'] = $title;		$obj['content'] = $content;				$t = "id = '%d'";		$where = sprintf($t, $id);		$this->msql->update($this->table_name, $obj, $where);		return true;	}    public function getAllRecordsForPage($articles_per_page, $skip)    {        $articles_per_page = (int) $articles_per_page;        $skip = (int) $skip;        $query = "SELECT a.id, a.title, a.content, a.creation_date, u.login				  FROM $this->table_name a				  LEFT JOIN users u ON u.id = a.user_id				  ORDER BY a.$this->table_key DESC LIMIT  $skip, $articles_per_page";        return $this->msql->select($query);    }    public function getRecordsAsPreview($articles_per_page, $skip)    {        $articles = $this->getAllRecordsForPage($articles_per_page, $skip);        for ($i = 0; $i < count($articles) ; $i++) {            $articles[$i]['content'] = $this->getArticlePreviewText($articles[$i]['content']);        }        return $articles;    }    public function getLastRecords($number_of_records)    {        $query = "SELECT *				  FROM $this->table_name				  ORDER BY creation_date DESC LIMIT $number_of_records";        return $this->msql->select($query);    }    public function getUserRecords($user_id)    {        $query = "SELECT *				  FROM $this->table_name				  WHERE user_id = $user_id				  ORDER BY creation_date DESC";        return $this->msql->select($query);    }}